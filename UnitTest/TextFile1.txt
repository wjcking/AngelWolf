 [TestMethod]
        public void utf()
        {
            //string utf8String = "骞垮憡涓戦椈";

            //// Create two different encodings.
            //Encoding utf8 = Encoding.UTF8;
            //Encoding defaultCode = Encoding.Default;

            //// Convert the string into a byte[].
            //byte[] utf8Bytes = default.GetBytes(utf8String);

            //// Perform the conversion from one encoding to the other.
            //byte[] defaultBytes = Encoding.Convert(utf8, defaultCode, utf8Bytes);

            //// Convert the new byte[] into a char[] and then into a string.
            //// This is a slightly different approach to converting to illustrate
            //// the use of GetCharCount/GetChars.
            //char[] defaultChars = new char[defaultCode.GetCharCount(defaultBytes, 0, defaultBytes.Length)];
            //defaultCode.GetChars(defaultBytes, 0, defaultBytes.Length, defaultChars, 0);
            //string defaultString = new string(defaultChars);

            //// Display the strings created before and after the conversion.
            //Console.WriteLine("Original string: {0}", utf8String);
            //Console.WriteLine("Ascii converted string: {0}", defaultString);

            ////或者如下：
            //byte[] buffer1 = Encoding.Default.GetBytes(utf8String);
            //byte[] buffer2 = Encoding.Convert(Encoding.UTF8, Encoding.Default, buffer1, 0, buffer1.Length);
            //string strBuffer = Encoding.Default.GetString(buffer2, 0, buffer2.Length);
        }

        [TestMethod]
        public void reflect()
        {
            //F:\VSProjects\AngelWolf\Business\Category.cs

            Type t = typeof(Category);//类名
                                      // t.GetMethod
                                      //  MethodInfo mt = t.GetMethod(Event);//加载方法
                                      //   string DoRet = mt.Invoke(this, new object[] { pra1, pra2, pra3 }).ToString();//执行

            //通过反射来执行类的静态方法
            Type tx = typeof(Business.Category);
            MethodInfo mf = tx.GetMethod("GetJsonLis2t", BindingFlags.Public | BindingFlags.Static, null, new Type[] { }, null);
            string saf = (string)mf.Invoke(null, null);

            Console.WriteLine(saf);
        }        [TestMethod]
        public void Testkets()
        {
            //var bytes = File.ReadAllBytes(@"e:\VSProjects\AngelWolf\Rastera\asnic\rastera\ketself.html");
            var lines = File.ReadAllLines(@"f:\VSProjects\AngelWolf\Rastera\asnic\rastera\ketself.html");
            //  var u= lines.GetUpperBound(0);
            char[] kets;

            int index = 0;
            //   var len = lines.GetUpperBound(1);
            var len = 0;
            var lenString=string.Empty;
         //   var sb = new StringBuilder();

        //    sb.Append("<table style=\"background-color: \"> ");

            foreach (var line in lines)
            {
               // sb.AppendLine("<tr>");
                index++;
                if (line.Length > len)
                {
                    len = line.Length;
                    lenString = line;
                    WriteLine(index.ToString());
                }
                //   Write("[" + index + "]");
                kets = line.ToCharArray();
                foreach (var k in kets)
                {
                    //web.dot11 dash.5ㄱ
                  //  sb.AppendLine("<td style='border:0.5px solid black'>");
             //       sb.Append(k);
                  //  sb.AppendLine("</td>");
                }
            //    sb.AppendLine("</tr>");
            }
            sb.Append("</table>");
        //    File.WriteAllText(@"C:\Users\Administrator\Desktop\kets.html", sb.ToString());
          //  Console.Write(sb.ToString());
            //for (int i = 0; i < len; i++)
            //    Write("--");

        }[TestMethod]
        public void WriteCategory()
        {
            var cate = PoweredSource.Category.GetList();
            var o = ParentInfo.GetNodeJson(typeof(RoleCategory).Name);
            WriteLine(o);
            jsonCategory = o;
         }
        [TestMethod]
        public void WriteRoleList()
        {
            var group = PoweredSource.Role.GetList();
            var o = ParentInfo.GetNodeJson(typeof(RoleInfo).Name);
            WriteLine(o);
            jsonRole = o;
        }
        [TestMethod]
        public void WriteRoleGroup()
        {
            var group = PoweredSource.Role.GetGroup();
            var o = ParentInfo.GetNodeJson(typeof(RoleInfo).Name);
            WriteLine(o);
            jsonRoleGroup = o;
        }
        [TestMethod]
        public void WriteIncident()
        {
            var cate = PoweredSource.Incident.GetList();
            var o = ParentInfo.GetNodeJson(typeof(IncidentInfo).Name);
            WriteLine(o);
            jsonIncident = o;
        }